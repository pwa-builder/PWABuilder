# Use the official ASP.NET Core runtime as the base image
FROM mcr.microsoft.com/dotnet/aspnet:9.0 AS base

# Install dependencies for Puppeteer (runtime only, no Node.js needed here)
RUN apt-get update && apt-get install -y \
    wget \
    gnupg \
    ca-certificates \
    procps \
    libxss1 \
    && wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
    && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list' \
    && apt-get update \
    && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1 \
    --no-install-recommends \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app
EXPOSE 8080

# Set environment variable for ASP.NET Core to listen on port 8080
ENV ASPNETCORE_URLS=http://+:8080

# Use the SDK image to build the application
FROM mcr.microsoft.com/dotnet/sdk:9.0 AS build

# Install Node.js in build stage
RUN curl -fsSL https://deb.nodesource.com/setup_lts.x | bash - \
    && apt-get install -y nodejs

WORKDIR /src

# Copy project files
COPY ["apps/pwabuilder/PWABuilder.csproj", "apps/pwabuilder/"]
COPY ["libraries/", "libraries/"]

# Restore dependencies
RUN dotnet restore "apps/pwabuilder/PWABuilder.csproj"

# Copy the rest of the application code
COPY . .

# Build frontend
WORKDIR /src/apps/pwabuilder/Frontend
RUN npm install
RUN npm run build

# Build backend
WORKDIR /src/apps/pwabuilder
RUN dotnet build "PWABuilder.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "PWABuilder.csproj" -c Release -o /app/publish /p:UseAppHost=false

# Final stage
FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .

# Set environment variables for Puppeteer
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/google-chrome-stable

# Set the port for Azure Web App (optional - Azure auto-detects from EXPOSE)
ENV WEBSITES_PORT=8080

# Create a non-root user for security
RUN addgroup --system --gid 1001 appgroup
RUN adduser --system --uid 1001 --gid 1001 appuser

# Give the user permission to access Chrome
RUN chown -R appuser:appgroup /usr/bin/google-chrome-stable
RUN chmod +x /usr/bin/google-chrome-stable

USER appuser

ENTRYPOINT ["dotnet", "PWABuilder.dll"]
