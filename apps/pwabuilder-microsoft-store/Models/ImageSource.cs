using Microsoft.Extensions.Logging;
using PWABuilder.MicrosoftStore.Common;
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Net.Http;
using System.Threading.Tasks;

namespace PWABuilder.MicrosoftStore.Models
{
    /// <summary>
    /// An image source used for the app package. Contains 3 potential sources of an image:
    /// an image URI specified from the app package options,
    /// an image URI specified in the web app manifest,
    /// an image entry in a zip file generated by the PWABuilder app image service.
    /// </summary>
    public class ImageSource
    {
        /// <summary>
        /// Gets the URI of the image that was fed into the <see cref="WindowsAppPackageOptions.Images"/> configuration.
        /// This is the highest priority source, priority 1.
        /// </summary>
        public Uri? AppPackageOptionsSource { get; set; }

        /// <summary>
        /// Gets the URI of the image taken from the PWA's web manifest.
        /// This has priority 2.
        /// </summary>
        public Uri? WebManifestSource { get; set; }

        /// <summary>
        /// Gets the zip entry of the image that was generated on behalf of the user.
        /// This is the lowest priority source, priority 3.
        /// </summary>
        public ZipArchiveEntry? GeneratedImageSource { get; set; }

        /// <summary>
        /// Gets the target file name.
        /// </summary>
        public string TargetFileName { get; set; } = string.Empty;

        /// <summary>
        /// Creates an ImageSource for the specified scale set.
        /// </summary>
        /// <param name="imageSetType"></param>
        /// <param name="scale"></param>
        /// <param name="imageOptions"></param>
        /// <param name="webManifest"></param>
        /// <param name="zip"></param>
        /// <returns></returns>
        public static ImageSource From(ImageScaleSetType imageSetType, ImageScale scale, WindowsImages imageOptions, WebAppManifestContext webManifest, ImageGeneratorServiceZipFile zip)
        {
            return new ImageSource
            {
                TargetFileName = imageSetType.ToWindowsImageNamingConventionFileName(scale),
                AppPackageOptionsSource = imageOptions.GetUriFromScale(imageSetType, scale, webManifest),
                WebManifestSource = webManifest.GetIconUriFromScale(imageSetType, scale),
                GeneratedImageSource = zip.GetScaleSet(imageSetType, scale)
            };
        }

        /// <summary>
        /// Creates an ImageSource for the specified scale set.
        /// </summary>
        /// <param name="imageSetType"></param>
        /// <param name="scale"></param>
        /// <param name="imageOptions"></param>
        /// <param name="webManifest"></param>
        /// <param name="zip"></param>
        /// <returns></returns>
        public static ImageSource From(ImageTargetSize targetSize, ImageAltForm altForm, WindowsImages imageOptions, WebAppManifestContext webManifest, ImageGeneratorServiceZipFile zip)
        {
            return new ImageSource
            {
                TargetFileName = altForm.ToWindowsImageNamingConventionString(targetSize) + ".png",
                AppPackageOptionsSource = imageOptions.GetUriFromTargetSize(targetSize, altForm),
                WebManifestSource = webManifest.GetIconUriFromTargetSize(targetSize, altForm),
                GeneratedImageSource = zip.GetTargetSize(targetSize, altForm)
            };
        }
    }
}
