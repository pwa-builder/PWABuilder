using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using PWABuilder.MicrosoftStore.Models;
using PWABuilder.MicrosoftStore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using PWABuilder.MicrosoftStore.Services;
using System.Threading;

namespace PWABuilder.MicrosoftStore.Controllers
{
    [ApiController]
    [Route("[controller]/[action]")]
    public class MsixController : ControllerBase
    {
        private readonly WindowsAppPackageCreator packageCreator;
        private readonly WindowsAppPackageInspector packageInspector;
        private readonly WindowsAppPackageUpdater packageUpdater;
        private readonly WindowsAppPackageBundler packageBundler;
        private readonly LooseLayoutPackager looseLayoutPackager;
        private readonly ILogger<MsixController> logger;

        public MsixController(
            WindowsAppPackageCreator packageCreator,
            WindowsAppPackageInspector packageInspector,
            WindowsAppPackageUpdater packageUpdater,
            WindowsAppPackageBundler packageBundler,
            LooseLayoutPackager looseLayoutPackager,
            ILogger<MsixController> logger)
        {
            this.packageCreator = packageCreator;
            this.packageInspector = packageInspector;
            this.packageUpdater = packageUpdater;
            this.packageBundler = packageBundler;
            this.looseLayoutPackager = looseLayoutPackager;
            this.logger = logger;
        }

        /// <summary>
        /// Creates a zip package containing the Windows modern package bundle, the Windows classic package bundle, the sideload package, and next steps to help the developer.
        /// </summary>
        /// <param name="options">The package creation options.</param>
        /// <returns></returns>
        [HttpPost] // for backward compat
        public Task<IActionResult> GenerateZip(WindowsAppPackageOptions options, CancellationToken cancelToken)
        {
            return CreateAppPackageAsync(options, HttpContext, cancelToken);
        }

        /// <summary>
        /// Creates a .msix package from the specified options.
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        [HttpPost] // for backward compat
        public Task<IActionResult> Generate(WindowsAppPackageOptions options, CancellationToken cancelToken)
        {
            return CreateMsix(options, cancelToken);
        }

        /// <summary>
        /// Tests if the specified file is a PWA app package.
        /// </summary>
        /// <param name="package">The file to check.</param>
        /// <remarks>
        /// This was build for Fall 2021 Hackathon with Mohan Mada and Judah Himango. Partner Center calls this API to determine if a package is a PWA package.
        /// </remarks>
        /// <returns>True if the package is a PWA app package generated by PWABuilder.</returns>
        [HttpPost]
        public async Task<bool> IsPwaPackage(IFormFile package)
        {
            if (package == null)
            {
                return false;
            }

            using var stream = package.OpenReadStream();
            return await packageInspector.IsPwa(stream);
        }

        /// <summary>
        /// Accepts an existing package or package bundle and updates its package ID, publisher ID, and publisher display name.
        /// </summary>
        /// <remarks>
        /// This was built for Fall 2021 Hackathon with Mohan Mada and Judah Himango. Partner Center calls this API to swap out the values of a package.
        /// </remarks>
        /// <param name="updateArgs">
        /// The update arguments containing the package file, package ID, publisher ID, and publisher display name.
        /// </param>
        /// <returns>The uploaded package with its package ID, publisher ID, and publisher display name updated.</returns>
        [HttpPost]
        public async Task<IActionResult> UpdatePackage([FromForm]UpdatePackageArgs updateArgs)
        {
            var validatedArgs = updateArgs.Validate();
            var responseStream = await this.packageUpdater.UpdatePackage(validatedArgs);
            var contentType = !string.IsNullOrWhiteSpace(validatedArgs.Package.ContentType) ? validatedArgs.Package.ContentType : "application/octet-stream";
            var downloadName = !string.IsNullOrWhiteSpace(validatedArgs.Package.FileName) ? validatedArgs.Package.FileName : Guid.NewGuid() + ".msix";
            return File(responseStream, contentType, downloadName);
        }

        /// <summary>
        /// Creates a package bundle from the specified package file.
        /// </summary>
        /// <param name="file">The package file. This should be a .appx or .msix file.</param>
        /// <returns>The bundle file.</returns>
        [HttpPost]
        public async Task<IActionResult> Bundle([FromForm]BundlePackageArgs bundleArgs)
        {
            var validatedArgs = bundleArgs.Validate();
            var responseStream = await packageBundler.Bundle(validatedArgs);
            var fileExtension = System.IO.Path.GetExtension(validatedArgs.Package.FileName)?.ToLowerInvariant() == ".appx" ?
                ".appxbundle" :
                ".msixbundle";
            var downloadName = !string.IsNullOrWhiteSpace(validatedArgs.Package.FileName) ?
                System.IO.Path.GetFileNameWithoutExtension(validatedArgs.Package.FileName) :
                Guid.NewGuid().ToString();
            return File(responseStream, "application/octet-stream", $"{downloadName}{fileExtension}");
        }

        /// <summary>
        /// Creates a .msix app package from a zip file containing a loose layout.
        /// </summary>
        /// <remarks>
        /// A loose layout is an unpackaged app contents. See https://docs.microsoft.com/en-us/windows/uwp/debug-test-perf/loose-file-registration#what-is-a-loose-file-layout
        /// </remarks>
        /// <param name="file">A zip file containing the loose layout of an app.</param>
        /// <returns>The msix file.</returns>
        [HttpPost]
        public async Task<IActionResult> CreatePackageFromLoose([FromForm] LoosePackageArgs loosePackageArgs)
        {
            var validatedArgs = loosePackageArgs.Validate();
            var responseStream = await looseLayoutPackager.Create(validatedArgs);
            var downloadName = !string.IsNullOrWhiteSpace(validatedArgs.LooseLayoutZip.FileName) ?
                System.IO.Path.GetFileNameWithoutExtension(validatedArgs.LooseLayoutZip.FileName) :
                Guid.NewGuid().ToString();
            return File(responseStream, "application/octet-stream", $"{downloadName}.msix");
        }

        private async Task<IActionResult> CreateAppPackageAsync(WindowsAppPackageOptions options, HttpContext? httpContext, CancellationToken cancelToken)
        {
            logger.LogInformation("Generating app package for {url} using {options}", options.Url, options);
            AnalyticsInfo analyticsInfo = new();
            if (httpContext?.Request.Headers != null)
            {
                analyticsInfo.platformId = httpContext.Request.Headers.TryGetValue("platform-identifier", out var id) ? id.ToString() : null;
                analyticsInfo.platformIdVersion = httpContext.Request.Headers.TryGetValue("platform-identifier-version", out var version) ? version.ToString() : null;
                analyticsInfo.correlationId = httpContext.Request.Headers.TryGetValue("correlation-id", out var corrId) ? corrId.ToString() : null;
                analyticsInfo.referrer = HttpContext.Request.Query.TryGetValue("ref", out var referrer) ? referrer.ToString() : null;
            }

            var appPackage = await packageCreator.CreateAppPackageAsync(options, analyticsInfo, cancelToken);
            logger.LogInformation("Successfully generated app package for {url}", options.Url);
            var mimeType = "application/zip";
            var fileName = GetFileResponseName(options, appPackage.ModernAppPackage) + ".zip";
            if (appPackage.ModernAppPackage != null)
            {
                AppendResponseHeaders(appPackage.ModernAppPackage);
            }
            return File(appPackage.PackageBytes, mimeType, fileName);
        }

        private async Task<IActionResult> CreateMsix(WindowsAppPackageOptions options, CancellationToken cancelToken)
        {
            logger.LogInformation("Generating MSIX for {url} using {options}", options.Url, options);

            var msixResult = await packageCreator.CreateMsixAsync(options, cancelToken);
            logger.LogInformation("Successfully generated MSIX for {url}", options.Url);
            var mimeType = "application/msix";
            var fileName = GetFileResponseName(options, msixResult.Package) + ".msix";
            AppendResponseHeaders(msixResult.Package);
            return File(msixResult.MsixBytes, mimeType, fileName);
        }

        // WinGet package manager uses these response headers to get detailed information about the publisher and app name.
        private void AppendResponseHeaders(ModernWindowsPackageResult app)
        {
            Response.Headers.Append("pwabuilder-package-publisher", app.PackageInfo.Identity?.Publisher ?? string.Empty);
            Response.Headers.Append("pwabuilder-package-name", app.PackageInfo.Identity?.Name ?? string.Empty);
        }

        private string GetFileResponseName(WindowsAppPackageOptions options, ModernWindowsPackageResult? package)
        {
            return
                options.Name ?? 
                options.PackageId ??
                package?.PackageInfo.Identity?.Name ??
                package?.PackageInfo.Properties?.DisplayName ??
                "windows-app";
        }
    }
}
