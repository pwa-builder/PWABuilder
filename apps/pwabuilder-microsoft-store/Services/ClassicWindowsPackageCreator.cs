using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Options;
using PWABuilder.MicrosoftStore.Common;
using PWABuilder.MicrosoftStore.Models;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text.Json;
using System.Threading.Tasks;
using System.Xml;
using System.Xml.Serialization;

namespace PWABuilder.MicrosoftStore
{
    /// <summary>
    /// Creates a Chromium Edge-based app package that works on Windows versions < 10.0.19041 ("Vibranium", also known as Windows 10 version 2004 May 2020 Update).
    /// </summary>
    public class ClassicWindowsPackageCreator : AppxUpdaterBase
    {
        private readonly AppSettings settings;
        private string? edgeAppId;

        public ClassicWindowsPackageCreator(MakeAppxWrapper makeAppx, MakePriWrapper makePri, IOptions<AppSettings> settings)
            : base(makePri, makeAppx)
        {
            this.settings = settings.Value;
        }

        /// <summary>
        /// Creates the classic Windows app package. Returns the file path to the generated app package.
        /// </summary>
        /// <param name="options">The package creation options.</param>
        /// <param name="edgeAppId">The ID generated by the pwa_builder.exe tool that uniquely identifies a PWA to Edge.</param>
        /// <param name="appImages">The app images.</param>
        /// <param name="outputDirectory">The output directory.</param>
        /// <param name="webManifest">The web manifest for the PWA.</param>
        /// <returns></returns>
        public async Task<ClassicWindowsPackageResult> Create(
            WindowsAppPackageOptions options, 
            WebAppManifestContext webManifest, 
            ImageGeneratorResult appImages, 
            string outputDirectory, 
            string? edgeAppId)
        {
            this.edgeAppId = edgeAppId;
            var appxPath = settings.ClassicWindowsAppPackagePath;
            var version = GetClassicAppVersion(options);

            // Make a new appx file from the ClassicWindowsAppPackage.appx template.
            var updatedAppxResult = await this.GenerateAppx(appxPath, version, options, webManifest, appImages, outputDirectory);

            // Bundle it into a .appxbundle
            var appxBundleFilePath = await makeAppx.Bundle(updatedAppxResult.AppxFilePath, version.WithZeroRevision());

            return new ClassicWindowsPackageResult
            {
                AppxFilePath = appxBundleFilePath
            };
        }

        protected async override Task UpdateAppxManifest(XmlDocument xmlDoc, WindowsAppPackageOptions options, Version appVersion, WebAppManifestContext webManifest, Publisher publisher)
        {
            await base.UpdateAppxManifest(xmlDoc, options, appVersion, webManifest, publisher);

            // Append a "created by PWABuilder" metadata node. This helps the Windows Partner Center team
            // greenlight such apps for quick approval.
            AddPwaBuilderNode(xmlDoc);

            // Update the resource language if specified.
            if (!string.IsNullOrWhiteSpace(options.ResourceLanguage))
            {
                var existingLanguageElement = xmlDoc.GetRequiredElementByTagName("Resource");
                var languageParentNode = existingLanguageElement.ParentNode;
                if (languageParentNode == null)
                {
                    throw new InvalidOperationException("Couldn't find parent node to insert language resource into.");
                }

                // Grab the languages.
                var languages = options.ResourceLanguage
                    .Split(',', StringSplitOptions.RemoveEmptyEntries)
                    .Select(lang => lang.Trim());
                foreach (var language in languages)
                {
                    var newLangNode = existingLanguageElement.Clone();
                    newLangNode.GetRequiredAttribute("Language").Value = language.ToUpperInvariant().Trim();
                    languageParentNode.AppendChild(newLangNode);
                }

                // Remove the existing language node.
                languageParentNode.RemoveChild(existingLanguageElement);
            }
        }

        protected override async Task UpdateProjectFiles(string outputDirectory, string projectDirectory, Version version, WindowsAppPackageOptions options, WebAppManifestContext webManifest, Publisher publisher, ImageGeneratorResult appImages)
        {
            await base.UpdateProjectFiles(outputDirectory, projectDirectory, version, options, webManifest, publisher, appImages);
            
            // Create the pwa.json file used in our pwainstaller.exe, which instructs Edge to install the PWA.
            await CreatePwaJson(options, webManifest, projectDirectory, edgeAppId);
        }

        private void AddPwaBuilderNode(XmlDocument xmlDoc)
        {
            var buildItem = xmlDoc.GetRequiredElementByTagName("build:Item");
            var pwaBuilderNode = buildItem.Clone();
            if (pwaBuilderNode.Attributes == null)
            {
                throw new InvalidOperationException("Unable to update Appx manifest due to missing attributes section.");
            }

            var nameAttribute = pwaBuilderNode.Attributes["Name"];
            if (nameAttribute != null)
            {
                nameAttribute.Value = "PWABuilder";
            }

            var valueAttr = xmlDoc.CreateAttribute("Value");
            valueAttr.Value = "f1942deb-3436-4ccd-bcf7-87abc78105b7";
            pwaBuilderNode.Attributes.Append(valueAttr);
            pwaBuilderNode.Attributes.RemoveNamedItem("Version");
            buildItem.ParentNode?.AppendChild(pwaBuilderNode);
        }

        private Task CreatePwaJson(WindowsAppPackageOptions options, WebAppManifestContext webManifest, string outputDirectory, string? edgeAppId)
        {
            var jsonData = new
            {
                appid = this.edgeAppId ?? options.PackageId,
                appurl = options.GetStartUrl(webManifest)
            };
            var jsonString = JsonSerializer.Serialize(jsonData);
            var filePath = Path.Combine(outputDirectory, "pwa.json");
            return File.WriteAllTextAsync(filePath, jsonString);
        }

        private Version GetClassicAppVersion(WindowsAppPackageOptions options)
        {
            // Use the classic package version if specified.
            if (Version.TryParse(options.ClassicPackage?.Version, out var classicPackageVersion))
            {
                return classicPackageVersion;
            }

            // No classic package version? Use a decremented version of the main package.
            if (!Version.TryParse(options.Version, out var modernPackageVersion))
            {
                throw new ArgumentException("Couldn't parse package version " + options.Version);
            }

            return modernPackageVersion.DecrementForStore();
        }
    }
}
